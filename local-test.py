import Levenshtein

# 计算两个字符串的相似度
text1 = "然而，由于每个虚拟机不仅需要有自己的操作系统，还需要操作系统运行所需的所有硬件的虚拟副本，这占用了极多的资源，并且虚拟机实例通过需要分钟级别的部署和关闭时间，对于运行在其上的应用程序而言，增加了任务的完成时间和执行成本。为了克服传统虚拟化技术的不足，基于容器的虚拟化技术应运而生。容器的虚拟化是对虚拟化技术的进一步发展。容器不像虚拟机那样直接虚拟化底层的计算机，而是在操作系统层面对资源进行虚拟化来实现应用进程的隔离，多个容器共享其所在主机的操作系统内核。容器可以将开发的应用程序和其所需的组件（如运行环境、依赖库等）打包在一起，使其与周围环境隔离开来。Docker是目前最具代表性容器技术，其主要有三部分组成：镜像、容器、仓库。Docker镜像包含了应用程序运行所需的完整运行环境，是一个只读的静态文件，一旦被创建便无法改变；容器是基于镜像创建的一个运行实例，可以被创建、启动、停止和删除；仓库是存储和管理所有镜像的地方，当运行实例不足时可以从仓库拉取镜像到相应虚拟机创建实例并执行任务。容器可以被看做一个沙箱，里面装着微服务运行所需的环境，容器可以被迁移到任何机器上且不影响容器里微服务的运行。容器的秒级的启动速度和灵活的资源配置，可以减少任务执行的额外等待时间和提高资源利用率。"
text2 = "然而，传统虚拟机存在一些缺陷，主要体现在每个虚拟机都需独立运行自己的完整操作系统及其虚拟的硬件副本上。这带来了巨大的资源占用，因为虚拟机实例必须包含操作系统及其所需的全部硬件虚拟化。而且，虚拟机的部署和关闭通常需要数分钟的时间，这显著增加了应用程序任务的完成时间和执行成本。为了克服传统虚拟化技术的这些不足，基于容器的虚拟化技术应运而生。容器虚拟化是对虚拟化技术的更进一步的发展。与虚拟机不同，容器不直接虚拟化底层计算机，而是在操作系统层面对资源进行虚拟化，实现了对应用进程的有效隔离。多个容器共享主机的操作系统内核，避免了每个容器都需要运行独立操作系统的问题。容器能够将应用程序及其所需组件（例如运行环境、依赖库等）打包在一起，形成一个隔离的运行环境。Docker技术是当前最具代表性的容器技术，主要包括镜像、容器和仓库三个核心组成部分。Docker镜像包含应用程序运行所需的完整运行环境，是只读的静态文件，一旦创建便不可更改；容器是在镜像基础上创建的运行实例，可以轻松创建、启动、停止和删除；仓库是存储和管理所有镜像的中心，当需要时，可以从仓库拉取镜像到相应的虚拟机创建实例并执行任务。容器可被视为一个沙箱，内含微服务运行所需的环境，而且容器可以在不影响微服务运行的情况下迁移到任何机器。容器具有秒级的启动速度和灵活的资源配置，这有助于减少任务执行的额外等待时间，同时提高资源利用率。"

similarity = 1 - Levenshtein.distance(text1, text2) / max(len(text1), len(text2))

print(f"文本相似度：{similarity * 100:.2f}%")
